#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
測試省道監視器縣市顯示修復
"""

def test_extract_county_from_location():
    """測試縣市提取功能"""
    
    def extract_county_from_location(location_description):
        """從位置描述中提取縣市（增強版）"""
        if not location_description:
            return '未知'
        
        location_str = location_description.lower()
        
        # 縣市關鍵字映射（包含更多關鍵字）
        county_keywords = {
            '基隆': ['基隆', '暖暖', '七堵', '安樂'],
            '台北': ['台北', '臺北', '北市', '信義', '松山', '大安', '中山', '中正', '萬華', '文山', '南港', '內湖', '士林', '北投'],
            '新北': ['新北', '板橋', '三重', '中和', '永和', '新店', '新莊', '土城', '蘆洲', '樹林', '汐止', '鶯歌', '三峽', 
                    '淡水', '瑞芳', '五股', '泰山', '林口', '深坑', '石碇', '坪林', '三芝', '石門', '八里', '平溪', '雙溪', 
                    '貢寮', '金山', '萬里', '烏來', '大華', '新北環快'],
            '桃園': ['桃園', '中壢', '平鎮', '八德', '楊梅', '蘆竹', '龜山', '龍潭', '大溪', '大園', '觀音', '新屋', '復興'],
            '新竹': ['新竹', '竹北', '湖口', '新豐', '關西', '芎林', '寶山', '竹東', '五峰', '橫山', '尖石', '北埔', '峨眉'],
            '苗栗': ['苗栗', '頭份', '竹南', '後龍', '通霄', '苑裡', '造橋', '頭屋', '公館', '大湖', '泰安', '銅鑼', '三義', '西湖', '卓蘭', '三灣', '南庄', '獅潭'],
            '台中': ['台中', '臺中', '中市', '北屯', '西屯', '南屯', '太平', '大里', '霧峰', '烏日', '豐原', '后里', '石岡', '東勢', '和平', '新社', '潭子', '大雅', '神岡', '大肚', '沙鹿', '龍井', '梧棲', '清水', '大甲', '外埔', '大安'],
            '彰化': ['彰化', '鹿港', '和美', '線西', '伸港', '福興', '秀水', '花壇', '芬園', '員林', '溪湖', '田中', '大村', '埔鹽', '埔心', '永靖', '社頭', '二水', '北斗', '二林', '田尾', '埤頭', '芳苑', '大城', '竹塘', '溪州'],
            '南投': ['南投', '埔里', '草屯', '竹山', '集集', '名間', '鹿谷', '中寮', '魚池', '國姓', '水里', '信義', '仁愛'],
            '雲林': ['雲林', '斗六', '斗南', '虎尾', '西螺', '土庫', '北港', '古坑', '大埤', '莿桐', '林內', '二崙', '崙背', '麥寮', '東勢', '褒忠', '台西', '元長', '四湖', '口湖', '水林'],
            '嘉義': ['嘉義', '民雄', '大林', '溪口', '新港', '朴子', '東石', '六腳', '太保', '鹿草', '水上', '中埔', '竹崎', '梅山', '番路', '大埔', '阿里山'],
            '台南': ['台南', '臺南', '南市', '安平', '安南', '中西', '東', '南', '北', '永康', '歸仁', '新化', '左鎮', '玉井', '楠西', '南化', '仁德', '關廟', '龍崎', '官田', '麻豆', '佳里', '西港', '七股', '將軍', '學甲', '北門', '新營', '後壁', '白河', '東山', '六甲', '下營', '柳營', '鹽水', '善化', '大內', '山上', '新市', '安定'],
            '高雄': ['高雄', '鳳山', '岡山', '旗山', '美濃', '橋頭', '梓官', '彌陀', '永安', '燕巢', '田寮', '阿蓮', '路竹', '湖內', '茄萣', '永安', '杉林', '內門', '茂林', '桃源', '那瑪夏', '甲仙', '六龜', '林園', '大寮', '大樹', '大社', '仁武', '鳥松', '小港'],
            '屏東': ['屏東', '潮州', '東港', '恆春', '萬丹', '長治', '麟洛', '九如', '里港', '鹽埔', '高樹', '萬巒', '內埔', '竹田', '新埤', '枋寮', '新園', '崁頂', '林邊', '南州', '佳冬', '琉球', '車城', '滿州', '枋山', '三地門', '霧台', '瑪家', '泰武', '來義', '春日', '獅子', '牡丹'],
            '宜蘭': ['宜蘭', '羅東', '蘇澳', '頭城', '礁溪', '壯圍', '員山', '冬山', '五結', '三星', '大同', '南澳'],
            '花蓮': ['花蓮', '鳳林', '玉里', '新城', '吉安', '壽豐', '光復', '豐濱', '瑞穗', '富里', '秀林', '萬榮', '卓溪'],
            '台東': ['台東', '臺東', '成功', '關山', '卑南', '大武', '太麻里', '東河', '長濱', '鹿野', '池上', '綠島', '延平', '海端', '達仁', '金峰', '蘭嶼']
        }
        
        for county, keywords in county_keywords.items():
            for keyword in keywords:
                if keyword in location_str:
                    return f"{county}{'市' if county in ['基隆', '台北', '新北', '桃園', '新竹', '台中', '嘉義', '台南', '高雄'] else '縣'}"
        
        return '未知'
    
    # 測試用例
    test_cases = [
        "快速公路62號(瑞芳交流道到大華系統交流道)(W)",  # 應該識別為新北市
        "快速公路62號(暖暖交流道到瑞芳交流道)(W)",        # 應該識別為基隆市或新北市
        "快速公路64號(觀音山交流道到五股交流道)(E)",      # 應該識別為新北市
        "台62線 新北環快速道路",                         # 應該識別為新北市
        "台64線 桃園觀音段",                             # 應該識別為桃園市
        "省道台1線 基隆暖暖段",                          # 應該識別為基隆市
        "台2線 淡水金山段",                              # 應該識別為新北市
        "台61線 宜蘭蘇澳段",                             # 應該識別為宜蘭縣
        "台3線 台中豐原段",                              # 應該識別為台中市
        "未知地點的監視器"                               # 應該識別為未知
    ]
    
    print("🔍 測試省道監視器縣市提取功能")
    print("=" * 50)
    
    for i, location in enumerate(test_cases, 1):
        extracted_county = extract_county_from_location(location)
        print(f"{i:2d}. 位置描述: {location}")
        print(f"    提取縣市: {extracted_county}")
        print()
    
    # 測試篩選邏輯
    print("🎯 測試篩選邏輯")
    print("=" * 30)
    
    # 模擬監視器資料
    mock_cameras = [
        {
            'name': '瑞芳交流道監視器',
            'location': '快速公路62號(瑞芳交流道到大華系統交流道)(W)',
            'road': '台62線',
            'county': '新北市'
        },
        {
            'name': '暖暖交流道監視器', 
            'location': '快速公路62號(暖暖交流道到瑞芳交流道)(W)',
            'road': '台62線',
            'county': '基隆市'
        },
        {
            'name': '觀音山交流道監視器',
            'location': '快速公路64號(觀音山交流道到五股交流道)(E)',
            'road': '台64線',
            'county': '新北市'
        }
    ]
    
    # 測試不同縣市的篩選
    test_counties = ['新北市', '基隆市', '桃園市']
    
    for test_county in test_counties:
        print(f"📍 測試縣市: {test_county}")
        
        matched_cameras = []
        for camera in mock_cameras:
            camera_county = camera['county']
            camera_location = camera['location'].lower()
            camera_name = camera['name'].lower()
            camera_road = camera['road'].lower()
            
            # 多重匹配策略
            county_match = False
            
            # 1. 直接匹配完整縣市名
            if test_county in camera_county:
                county_match = True
            
            # 2. 匹配縣市簡稱
            county_short = test_county.replace('市', '').replace('縣', '')
            if county_short in camera_county or county_short in camera_location or county_short in camera_name:
                county_match = True
            
            # 3. 根據縣市關鍵字匹配
            county_keywords_map = {
                '基隆市': ['基隆', '暖暖', '七堵'],
                '台北市': ['台北', '臺北', '北市', '信義', '松山'],
                '新北市': ['新北', '板橋', '三重', '中和', '瑞芳', '大華', '五股', '林口'],
                '桃園市': ['桃園', '中壢', '觀音', '青埔'],
            }
            
            if test_county in county_keywords_map:
                for keyword in county_keywords_map[test_county]:
                    if keyword in camera_location or keyword in camera_name or keyword in camera_road:
                        county_match = True
                        break
            
            if county_match:
                matched_cameras.append(camera)
        
        print(f"   找到 {len(matched_cameras)} 個匹配的監視器:")
        for cam in matched_cameras:
            print(f"     • {cam['name']} ({cam['county']})")
        print()

if __name__ == "__main__":
    test_extract_county_from_location()
